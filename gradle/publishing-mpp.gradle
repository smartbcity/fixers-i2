import org.gradle.util.VersionNumber

/*
 * Copyright 2017-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */

// Configures publishing of Maven artifacts to Bintray

apply plugin: 'maven'
apply plugin: 'maven-publish'

apply from: project.rootProject.file('gradle/pom.gradle')

def isKotlin137x = VersionNumber.parse("1.4.0") <= VersionNumber.parse("1.3.79")

def sonatypeUsername = System.getenv("sonatypeUsername") ?: ""
def sonatypePassword = System.getenv("sonatypePassword") ?: ""
def signingKey = System.getenv("signingKey") ?: ""
def signingPassword = System.getenv("signingPassword") ?: ""
def releasesRepoUrl =  "https://oss.sonatype.org/service/local/staging/deploy/maven2"
def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
def repoUrl = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

println("///////////////////////////////////////////")
println("Deploy to: $repoUrl with $sonatypeUsername" )
println("///////////////////////////////////////////")


task stubSources(type: Jar) {
    classifier = 'sources'
}

task stubJavadoc(type: Jar) {
    classifier = 'javadoc'
}

task emptyJar(type: Jar) {
}

afterEvaluate {
    task mainSourcesJar(type: Jar) {
        classifier = 'sources'
        from kotlin.sourceSets.commonMain.kotlin
    }
}

afterEvaluate {
    publishing {
        repositories {
            maven {
                url = repoUrl
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
            maven { name = "testLocal"; url = "$rootProject.buildDir/m2" }
        }

        def variantName = "${project.name}"


        // Rename artifacts for backward compatibility
        publications.all {
            def type = it.name
            logger.info("Configuring $type")
            switch (type) {
                case 'kotlinMultiplatform':
                    if (isKotlin137x) {
                        it.artifactId = "$variantName-native"
                        it.artifact sourcesJar
                    } else {
                        // With Kotlin 1.4.0, the root module ID has no suffix, but for compatibility with
                        // the consumers who can't read Gradle module metadata, we publish the JVM artifacts in it
                        it.artifactId = variantName
                        apply from: "$rootDir/gradle/publish-mpp-root-module-in-platform.gradle"
//                        publishPlatformArtifactsInRootModule(publications["jvm"])
                    }
                    break

                case 'metadata':
                    it.artifactId = isKotlin137x ? "$variantName-common" : "$variantName-metadata"
                    break

                case 'jvm':
                    it.artifactId = isKotlin137x ? "$variantName" : "$variantName-jvm"
                    break

                case 'js':
                    it.artifactId = "$variantName-$type"
                    break
            }
            logger.info("Artifact id = ${it.artifactId}")

            pom.withXml(configureMavenCentralMetadata)

            // The 'root' module publishes the JVM module's Javadoc JAR as per publishPlatformArtifactsInRootModule, and
            // every other module should publish an empty Javadoc JAR. TODO: provide proper documentation artifacts?
            if (name != "kotlinMultiplatform")
                artifact stubJavadoc
        }

    }
}


// Compatibility with old TeamCity configurations that perform :kotlinx-coroutines-core:bintrayUpload
task nexusUpload(dependsOn: publish)

// This is required for K/N publishing
nexusUpload.dependsOn publishToMavenLocal


